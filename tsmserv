
# roles/tsm_upgrade/tasks/main.yml
---
- name: Check Available Disk Space
  stat:
    path: /
  register: disk_space

- name: Fail if Disk Space is Insufficient
  fail:
    msg: "Insufficient disk space on {{ ansible_hostname }} to proceed with the upgrade."
  when: disk_space.stat.available < 10737418240  # Example threshold (10GB).

- name: Check if TSM Server is Running
  command: ps aux | grep dsmserv | grep -v grep
  register: tsm_server_status
  ignore_errors: yes

- name: Fail if TSM Server is Running
  fail:
    msg: "The TSM server is currently running on {{ ansible_hostname }}. Please stop it before upgrading."
  when: tsm_server_status.rc == 0

- name: Backup TSM Database
  command: dsmadmc -id={{ tsm_admin_user }} -pa={{ tsm_admin_password }} backup db
  become: yes

- name: Halt TSM Instance
  command: dsmadmc -id={{ tsm_admin_user }} -pa={{ tsm_admin_password }} halt
  become: yes

- name: Ensure TSM Upgrade Package Directory Exists
  file:
    path: "{{ tsm_install_dir }}/upgrade"
    state: directory

- name: Download TSM Upgrade Package from Artifactory
  get_url:
    url: "{{ tsm_artifactory_url }}/{{ tsm_binary_filename }}"
    dest: "{{ tsm_install_dir }}/upgrade/{{ tsm_binary_filename }}"
    validate_certs: no
  register: download_result

- name: Extract TSM Upgrade Package
  ansible.builtin.unarchive:
    src: "{{ tsm_install_dir }}/upgrade/{{ tsm_binary_filename }}"
    dest: "{{ tsm_install_dir }}/upgrade"
    remote_src: yes
  when: download_result.changed

- name: Run TSM Upgrade in Silent Mode
  command: |
    cd {{ tsm_install_dir }}/upgrade
    ./upgrade_script.sh --silent --responsefile {{ tsm_install_dir }}/upgrade/tsm_response.xml
  args:
    chdir: "{{ tsm_install_dir }}/upgrade"
  async: 1200
  poll: 0
  register: upgrade_result
  changed_when: false  # The command is considered successful regardless of its return code.

- name: Check if TSM Server is Running After Upgrade
  command: ps aux | grep dsmserv | grep -v grep
  register: tsm_server_status_post
  ignore_errors: yes

- name: Fail if TSM Server is Not Running After Upgrade
  fail:
    msg: "The TSM server is not running on {{ ansible_hostname }} after the upgrade."
  when: tsm_server_status_post.rc != 0

- name: Verify TSM Server Version
  command: "{{ tsm_install_dir }}/dsmserv -version"
  register: tsm_version_info

- name: Fail if TSM Version Verification Fails
  fail:
    msg: "TSM version verification failed on {{ ansible_hostname }} after the upgrade."
  when: "'Tivoli Storage Manager' not in tsm_version_info.stdout"

# Rollback Tasks
- name: Rollback TSM Server
  block:
    - name: Stop the New TSM Server
      command: dsmadmc -id={{ tsm_admin_user }} -pa={{ tsm_admin_password }} stop server
      become: yes

    - name: Restore Previous TSM Version (Replace with Your Restore Process)

    - name: Start the Previous TSM Server
      command: dsmadmc -id={{ tsm_admin_user }} -pa={{ tsm_admin_password }} start server
      become: yes
  rescue:
    - name: Rollback Failed
      fail:
        msg: "Rollback failed on {{ ansible_hostname }}."
