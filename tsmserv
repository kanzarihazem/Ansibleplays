---
- name: Validate and check TSM server
  hosts: tsm_servers
  gather_facts: no
  become: yes
  vars:
    test_results: ""

  tasks:
    - name: Check if TSM service is running
      shell: systemctl is-active dsmcad
      register: service_status
      ignore_errors: yes

    - name: Add TSM service status to test results
      set_fact:
        test_results: "{{ test_results }}\nTSM Service: {{ 'OK' if service_status.stdout == 'active' else 'NOTOK' }}"

    - name: Display TSM service status
      debug:
        msg: "TSM Service: {{ 'OK' if service_status.stdout == 'active' else 'NOTOK' }}"

    - name: Check installed TSM version
      shell: dsmc query session
      register: tsm_version
      ignore_errors: yes

    - name: Add TSM version to test results
      set_fact:
        test_results: "{{ test_results }}\nTSM Version: {{ 'OK' if 'IBM Spectrum Protect' in tsm_version.stdout else 'NOTOK' }}"

    - name: Display TSM version
      debug:
        msg: "TSM Version: {{ 'OK' if 'IBM Spectrum Protect' in tsm_version.stdout else 'NOTOK' }}"

    - name: Check TSM server connectivity
      shell: dsmc query session
      register: tsm_connectivity
      ignore_errors: yes

    - name: Add TSM server connectivity to test results
      set_fact:
        test_results: "{{ test_results }}\nTSM Connectivity: {{ 'OK' if 'Session established' in tsm_connectivity.stdout else 'NOTOK' }}"

    - name: Display TSM server connectivity
      debug:
        msg: "TSM Connectivity: {{ 'OK' if 'Session established' in tsm_connectivity.stdout else 'NOTOK' }}"

    - name: Check disk space available for backups
      command: df -h /backup
      register: disk_space
      ignore_errors: yes

    - name: Add disk space available to test results
      set_fact:
        test_results: "{{ test_results }}\nDisk Space: {{ 'OK' if disk_space.stdout else 'NOTOK' }}"

    - name: Display disk space available for backups
      debug:
        msg: "Disk Space: {{ 'OK' if disk_space.stdout else 'NOTOK' }}"

    - name: Check if TSM configuration file exists
      stat:
        path: /opt/tivoli/tsm/client/ba/bin/dsm.opt
      register: tsm_config
      ignore_errors: yes

    - name: Add TSM configuration file status to test results
      set_fact:
        test_results: "{{ test_results }}\nTSM Config File: {{ 'OK' if tsm_config.stat.exists else 'NOTOK' }}"

    - name: Display TSM configuration file status
      debug:
        msg: "TSM Config File: {{ 'OK' if tsm_config.stat.exists else 'NOTOK' }}"

    - name: Extract TSM filesystems from fstab
      shell: grep stg /etc/fstab | awk '{print $2}'
      register: tsm_filesystems
      ignore_errors: yes

    - name: Check if TSM filesystems are mounted
      shell: mount | grep -w {{ item }}
      with_items: "{{ tsm_filesystems.stdout_lines }}"
      register: mount_check
      ignore_errors: yes

    - name: Add TSM filesystems mount status to test results
      set_fact:
        test_results: "{{ test_results }}\nFilesystem {{ item.item }}: {{ 'OK' if item.stdout else 'NOTOK' }}"
      with_items: "{{ mount_check.results }}"

    - name: Display TSM filesystems mount status
      debug:
        msg: "Filesystem {{ item.item }}: {{ 'OK' if item.stdout else 'NOTOK' }}"
      with_items: "{{ mount_check.results }}"

    - name: Check if LACP is activated
      shell: nmcli con show | grep bond
      register: lacp_check
      ignore_errors: yes

    - name: Add LACP status to test results
      set_fact:
        test_results: "{{ test_results }}\nLACP: {{ 'OK' if lacp_check.stdout else 'NOTOK' }}"

    - name: Display LACP status
      debug:
        msg: "LACP: {{ 'OK' if lacp_check.stdout else 'NOTOK' }}"

    - name: Check number of volume groups
      shell: vgs --noheadings | wc -l
      register: vg_count
      ignore_errors: yes

    - name: Add VG count status to test results
      set_fact:
        test_results: "{{ test_results }}\nVG Count: {{ 'OK' if vg_count.stdout|int > 10 else 'NOTOK' }}"

    - name: Display VG count status
      debug:
        msg: "VG Count: {{ 'OK' if vg_count.stdout|int > 10 else 'NOTOK' }}"

    - name: Check Red Hat version
      shell: cat /etc/redhat-release
      register: redhat_version
      ignore_errors: yes

    - name: Add Red Hat version status to test results
      set_fact:
        test_results: "{{ test_results }}\nRed Hat Version: {{ 'OK' if (redhat_version.stdout.split()[6]|float > 7.7) else 'NOTOK' }}"

    - name: Display Red Hat version status
      debug:
        msg: "Red Hat Version: {{ 'OK' if (redhat_version.stdout.split()[6]|float > 7.7) else 'NOTOK' }}"

    - name: Write test results to a file
      copy:
        content: "{{ test_results }}"
        dest: /tmp/tsm_validation_results.txt
      ignore_errors: yes
