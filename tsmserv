ansible_tsm_upgrade_role/
├── roles/
│   └── tsm_upgrade/
│       ├── tasks/
│       │   └── main.yml
│       ├── templates/
│       │   └── tsm_response.xml.j2
│       └── defaults/
│           └── main.yml
├── playbook.yml
└── inventory.ini




# roles/tsm_upgrade/defaults/main.yml
tsm_install_dir: /opt/tsm
tsm_server_name: MyTSMServer
tsm_license_acceptance: accept
tsm_log_dir: /var/log/tsm
tsm_db_backup_dir: /backup/tsm
tsm_db_log_dir: /var/log/tsm/dblogs
tsm_dsmserv_options: "-tracefile=/var/log/tsm/dsmserv.log"
tsm_tcp_server_port: 1500
tsm_node_name: MyNode
tsm_db2_instance_name: tsmdb2
tsm_use_existing_database: YES
tsm_db2_admin_username: db2admin
tsm_db2_admin_password: db2admin_password
# roles/tsm_upgrade/defaults/main.yml
tsm_version: 8.1.16
tsm_artifactory_url: https://your-artifactory-url.com/path/to/tsm-binaries/
tsm_binary_filename: tsm_server_upgrade_{{ tsm_version }}.tar.gz
tsm_install_dir: /opt/tsm


<!-- roles/tsm_upgrade/templates/tsm_response.xml.j2 -->
<TSMUpgrade>
    <UpgradeAction>upgrade</UpgradeAction>
    <InstallDir>{{ tsm_install_dir }}</InstallDir>
    <ServerName>{{ tsm_server_name }}</ServerName>
    <LicenseAcceptance>{{ tsm_license_acceptance }}</LicenseAcceptance>
    <LogDir>{{ tsm_log_dir }}</LogDir>
    <DBBackupDir>{{ tsm_db_backup_dir }}</DBBackupDir>
    <DBLogDir>{{ tsm_db_log_dir }}</DBLogDir>
    <DSMSERVOptions>{{ tsm_dsmserv_options }}</DSMSERVOptions>
    <TCPServerPort>{{ tsm_tcp_server_port }}</TCPServerPort>
    <NodeName>{{ tsm_node_name }}</NodeName>
    <PasswordAccess generateRandom="YES">{{ tsm_db2_admin_password }}</PasswordAccess>
    <DB2InstanceName>{{ tsm_db2_instance_name }}</DB2InstanceName>
    <UseExistingDatabase>{{ tsm_use_existing_database }}</UseExistingDatabase>
    <DB2AdminUsername>{{ tsm_db2_admin_username }}</DB2AdminUsername>
</TSMUpgrade>


# roles/tsm_upgrade/tasks/main.yml
- name: Ensure TSM Upgrade Package Directory Exists
  file:
    path: "{{ tsm_install_dir }}/upgrade"
    state: directory

- name: Download TSM Upgrade Package from Artifactory
  get_url:
    url: "{{ tsm_artifactory_url }}/{{ tsm_binary_filename }}"
    dest: "{{ tsm_install_dir }}/upgrade/{{ tsm_binary_filename }}"
    validate_certs: no
  register: download_result

- name: Extract TSM Upgrade Package
  ansible.builtin.unarchive:
    src: "{{ tsm_install_dir }}/upgrade/{{ tsm_binary_filename }}"
    dest: "{{ tsm_install_dir }}/upgrade"
    remote_src: yes
  when: download_result.changed

- name: Run TSM Upgrade in Silent Mode
  command: |
    cd {{ tsm_install_dir }}/upgrade
    ./upgrade_script.sh --silent --responsefile {{ tsm_install_dir }}/upgrade/tsm_response.xml
  args:
    chdir: "{{ tsm_install_dir }}/upgrade"
  async: 1200
  poll: 0
  register: upgrade_result
  changed_when: false  # The command is considered successful regardless of its return code.

# playbook.yml
---
- name: Upgrade TSM Server
  hosts: tsm_servers
  become: yes  # If root access is required for the upgrade
  roles:
    - tsm_upgrade
  vars:
    tsm_version: 8.1.16  # Specify the desired TSM version here


