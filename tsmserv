
my_tsm_role/
├── defaults/
│   └── main.yml
├── tasks/
│   ├── main.yml
│   ├── check_backup_rear.yml
│   ├── check_client_tsm.yml
│   ├── check_crontab_rear.yml
│   ├── check_fichier_dsm.yml
│   ├── check_inclexcl_old_dsmsys.yml
│   ├── check_install_rear.yml
│   ├── check_spscheduler_sys.yml
│   ├── check_tsmsystem_dir.yml
│   ├── maj_app_dsmopt.yml
│   ├── maj_app_dsmsys.yml
│   ├── maj_dsmopt.yml
│   ├── maj_dsmsys.yml
│   ├── relance_spscheduler_sys.yml
│   ├── schedule_tsm.yml
│   └── test_flux.yml
├── handlers/
│   └── main.yml
├── templates/
│   ├── dsmopt.j2
│   ├── dsmsys.j2
│   └── spscheduler_sys.j2
└── meta/
    └── main.yml

templates/dsmopt.j2
SERVERNAME {{ ansible_hostname }}

templates/dsmsys.j2
SERVERNAME {{ ansible_hostname }}
NODENAME {{ ansible_hostname }}_SYS
TCPSERVERADDRESS {{ server_address }}
TCPPort {{ server_port }}
COMPRESSION on
MANAGEDSERVICES schedule
PasswordAccess generate
Errorlogname {{ remed_dir }}/dsmsys_error.log
Schedlogname {{ remed_dir }}/dsmsys_sched.log
Errorlogretention 30
Schedlogretention 30
ssl yes

templates/spscheduler_sys.j2


[Unit]
Description=IBM Tivoli Storage Manager Client dsmcad system
Documentation=http://www-01.ibm.com/support/knowledgecenter/SSGSG7_6.4.0/com.ibm.itsm.client.doc/t_sched_create_restrict_schedule.html
After=local-fs.target network-online.target

[Service]
Type=forking
Environment="DSM_LOG=/apps/sys/log" "LD_LIBRARY_PATH=/opt/tivoli/tsm/client/ba/bin" "DSM_CONFIG=/apps/sys/admin/tsm_system/dsm.opt" "LANG=en_US"
ExecStart=/usr/bin/dsmcad
Restart=always
RestartSec=5s
StartLimitInterval=0

[Install]
WantedBy=multi-user.target



defaults/main.yml

---
server_address: "127.0.0.1"
server_port: "8080"
remed_dir: "/apps/sys/log/MCO_suv_sys"
sp_scheduler_service_path: "/etc/systemd/system/SP_Scheduler_sys.service"
fs_back: "/apps/sys/back"
rear_back: "rear-{{ ansible_hostname }}.tar"
log_rear: "/var/log/rear/rear-{{ ansible_hostname }}.log"
dsmopt: "/apps/sys/admin/tsm_system/dsm.opt"
dsmsys: "/apps/sys/admin/tsm_system/dsm.sys"
app_dsmopt: "/opt/tivoli/tsm/client/ba/bin/dsm.opt"
app_dsmsys: "/opt/tivoli/tsm/client/ba/bin/dsm.sys"
node_name_app: "{{ ansible_hostname }}_APP"
rear_sh: "/apps/sys/admin/rear-bp21.sh"
tsm_system_dir: "/apps/sys/admin/tsm_system/"
src_test_flux: 0  # This will be set based on the outcome of the Test Flux task.
RCDSM: 1          # Default, will be set based on checks

tasks/main.yml

---
- name: Ensure REMED_DIR exists and is clean
  block:
    - name: Remove REMED_DIR if it exists
      file:
        path: "{{ remed_dir }}"
        state: absent
      when: remed_dir is defined

    - name: Create REMED_DIR
      file:
        path: "{{ remed_dir }}"
        state: directory
        mode: '0755'

- name: Check RedHat Version and log it
  block:
    - name: Check RedHat Version
      command: "cat /etc/redhat-release"
      register: redhat_version_result

    - name: Extract RedHat Version
      set_fact:
        redhat_version: "{{ redhat_version_result.stdout.split()[-2] }}"

    - name: Log RedHat Version
      debug:
        msg: "CTRL_VERSION_RHEL:{{ redhat_version }}"

- name: Test Flux
  include_tasks: test_flux.yml
  register: test_flux_result

- name: Set src_test_flux based on Test Flux result
  set_fact:
    src_test_flux: "{{ test_flux_result.results[0].rc | default(1) }}"  # Assuming test_flux.yml has a single block/task that returns the rc

- name: Execute main checks and operations only if Test Flux is successful
  block:
    - name: Check install REAR
      include_tasks: check_install_rear.yml

    - name: Check crontab REAR
      include_tasks: check_crontab_rear.yml

    - name: Check client TSM
      include_tasks: check_client_tsm.yml

    - name: Maj app dsmopt
      include_tasks: maj_app_dsmopt.yml

    - name: Maj app dsmsys
      include_tasks: maj_app_dsmsys.yml

    - name: Check inclexcl old dsmsys
      include_tasks: check_inclexcl_old_dsmsys.yml

    - name: Check TSM system directory
      include_tasks: check_tsmsystem_dir.yml

    - name: Maj dsmopt
      include_tasks: maj_dsmopt.yml

    - name: Maj dsmsys
      include_tasks: maj_dsmsys.yml

    - name: Check DSM files
      include_tasks: check_fichier_dsm.yml
      register: check_fichier_dsm_result

    - name: Set RCDSM based on DSM files check
      set_fact:
        RCDSM: "{{ '0' if check_fichier_dsm_result.rc == 0 else '1' }}"

    - name: Execute additional checks if RCDSM is 0
      block:
        - name: Schedule TSM
          include_tasks: schedule_tsm.yml

        - name: Check SP Scheduler sys
          include_tasks: check_spscheduler_sys.yml

        - name: Relaunch SP Scheduler sys
          include_tasks: relance_spscheduler_sys.yml

        - name: Check Backup REAR
          include_tasks: check_backup_rear.yml
      when: RCDSM == '0'

  when: src_test_flux == 0

- name: Log failure if Test Flux failed
  debug:
    msg: "### Test flux KO on instance {{ ansible_hostname }} port {{ server_port }}, exit"
  when: src_test_flux != 0

tasks/test_flux.yml

---
- name: Log start of Test Flux
  debug:
    msg: "### TEST FLUX {{ ansible_date_time.iso8601 }}"

- name: Wait for TCP connection
  wait_for:
    host: "{{ server_address }}"
    port: "{{ server_port }}"
    timeout: 5
    state: started
  register: tcp_check_result

- name: Capture the telnet result
  shell: "echo '' | telnet {{ server_address }} {{ server_port }}"
  register: telnet_output
  ignore_errors: yes

- name: Check if the connection was successful
  set_fact:
    rc_test_flux: "{{ '0' if telnet_output.stdout | regex_search('Connected to', ignorecase=True) else '1' }}"
    msg: "{{ '### Test flux OK on instance ' + ansible_hostname + ' port ' + server_port if rc_test_flux == '0' else '### Test flux KO on instance ' + ansible_hostname + ' port ' + server_port }}"

- name: Log test flux result
  debug:
    msg: "{{ msg }}"

- name: Log detailed message for successful connection
  debug:
    msg: "Ctrl_flux: Test flux OK on instance {{ ansible_hostname }} port {{ server_port }}"
  when: rc_test_flux == "0"

- name: Handle failed connection
  block:
    - name: Log failure with rc=1
      debug:
        msg: "### failed with rc=1"
    - name: Exit with status 100
      fail:
        msg: "Test flux failed. Exiting with status 100."
  when: rc_test_flux == "1"

- name: Log end of Test Flux
  debug:
    msg: "### END TEST FLUX {{ ansible_date_time.iso8601 }}"

tasks/check_install_rear.yml

---
- name: Ensure REAR is installed
  package:
    name: rear
    state: present

- name: Check REAR configuration
  command: rear -d
  register: rear_check
  failed_when: "'ERROR' in rear_check.stdout"

tasks/check_crontab_rear.yml

---
- name: Ensure crontab for REAR is set
  cron:
    name: "REAR Backup"
    job: "/usr/sbin/rear -v mkbackup"
    state: present

tasks/check_client_tsm.yml

---
- name: Ensure TSM client is installed
  package:
    name: tsm
    state: present

- name: Check TSM client configuration
  command: dsmc q sess
  register: tsm_client_check
  failed_when: tsm_client_check.rc != 0

tasks/maj_app_dsmopt.yml

---
- name: Update dsm.opt file
  template:
    src: dsmopt.j2
    dest: "{{ dsmopt }}"
    mode: '0744'

tasks/maj_app_dsmsys.yml

---
- name: Update dsmsys file
  template:
    src: dsmsys.j2
    dest: "{{ dsmsys }}"
    mode: '0744'

tasks/check_inclexcl_old_dsmsys.yml

---
- name: Check and update inclusion/exclusion in DSMSYS
  lineinfile:
    path: "{{ dsmsys }}"
    line: "EXCLUDE /path/to/exclude"
    state: present

tasks/check_tsmsystem_dir.yml

---
- name: Ensure TSM_SYSTEM_DIR exists
  file:
    path: "{{ tsm_system_dir }}"
    state: directory
    mode: '0755'

tasks/maj_dsmopt.yml

---
- name: Update DSMOPT settings
  lineinfile:
    path: "{{ dsmopt }}"
    line: "NODENAME {{ ansible_hostname | upper }}"
    state: present

tasks/maj_dsmsys.yml

---
- name: Update DSMSYS settings
  lineinfile:
    path: "{{ dsmsys }}"
    line: "TCPSERVERADDRESS {{ server_address }}"
    state: present

tasks/check_fichier_dsm.yml

---
- name: Check existence of DSM files
  stat:
    path: "{{ dsmsys }}"
  register: check_dsmsys

- name: Check existence of DSMOPT files
  stat:
    path: "{{ dsmopt }}"
  register: check_dsmopt

- name: Set RCDSM based on checks
  set_fact:
    RCDSM: "{{ '0' if check_dsmsys.stat.exists and check_dsmopt.stat.exists else '1' }}"

tasks/schedule_tsm.yml

---
- name: Schedule TSM task
  command: dsmc sched -se={{ ansible_hostname }}
  register: schedule_tsm
  ignore_errors: yes

tasks/check_spscheduler_sys.yml

---
- name: Ensure SP Scheduler service path exists
  stat:
    path: "{{ sp_scheduler_service_path }}"
  register: sp_scheduler_service_file

- name: Get DSMCAD process PID
  command: pgrep dsmcad
  register: dsmcad_pid_before
  ignore_errors: yes

- name: Stop SP Scheduler service if it exists
  systemd:
    name: "{{ sp_scheduler_service_path }}"
    state: stopped
  when: sp_scheduler_service_file.stat.exists
  register: stop_service_result
  ignore_errors: yes

- name: Start SP Scheduler service if it was stopped successfully
  systemd:
    name: "{{ sp_scheduler_service_path }}"
    state: started
  when: stop_service_result.changed

- name: Ensure DSMCAD process is running after restart
  command: pgrep dsmcad
  register: dsmcad_pid_after
  ignore_errors: yes
  failed_when: dsmcad_pid_after.rc != 0

- name: Handle SP Scheduler service creation if not present
  block:
    - name: Create SP Scheduler service using template
      template:
        src: spscheduler_sys.j2
        dest: "{{ sp_scheduler_service_path }}"
        mode: '0750'

    - name: Reload systemd to recognize new service
      systemd:
        daemon_reload: yes

    - name: Enable and start the new SP Scheduler service
      systemd:
        name: "{{ sp_scheduler_service_path }}"
        enabled: yes
        state: started

  when: not sp_scheduler_service_file.stat.exists

tasks/relance_spscheduler_sys.yml

---
- name: Restart TSM service if needed
  block:
    - name: Get DSMCAD process count
      command: "pgrep -c dsmcad"
      register: dsmcad_count

    - name: Kill DSMCAD process if running
      command: "pkill dsmcad"
      when: dsmcad_count.stdout|int > 0
      notify:
        - Restart DSMCAD

    - name: Start DSMCAD service
      systemd:
        name: "{{ sp_scheduler_service_path }}"
        state: started
      when: dsmcad_count.stdout|int == 0

handlers/main.yml

---
- name: Restart DSMCAD
  systemd:
    name: "{{ sp_scheduler_service_path }}"
    state: restarted

- name: Update DSMSYS
  template:
    src: dsmsys.j2
    dest: "{{ dsmsys }}"
    mode: '0744'
